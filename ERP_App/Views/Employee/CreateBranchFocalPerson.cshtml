@model ERP_App.Models.FocalPersonMV
@{
    ViewBag.Title = "Branch Focal Person";
}

<h2>Create Branch Focal Person</h2>

@using (Html.BeginForm("CreateBranchFocalPerson", "Employee", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(u => u.BranchID)
        @Html.HiddenFor(u => u.CompanyID)
        @Html.HiddenFor(u => u.userMV.UserTypeID)
        <h3>Person Details</h3>
        <hr />
        <div class="form-group">

            @*<div class="col-md-10">
                    @Html.DropDownList("UserTypeID", ViewBag.UserTypeID as SelectList, "---Select---", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.userMV.UserTypeID, "", new { @class = "text-danger" })
                </div>*@
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacter" } })
                @Html.ValidationMessageFor(model => model.employeeMV.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.ContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.ContactNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlynumber" } })
                @Html.ValidationMessageFor(model => model.employeeMV.ContactNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.Photo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.Photo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.employeeMV.Photo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.Email, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "email" } })
                @Html.ValidationMessageFor(model => model.employeeMV.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.Address, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.employeeMV.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.CNIC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.CNIC, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlynumbers" } })
                @Html.ValidationMessageFor(model => model.employeeMV.CNIC, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.Designation, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacters" } })
                @Html.ValidationMessageFor(model => model.employeeMV.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.Description, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacter" } })
                @Html.ValidationMessageFor(model => model.employeeMV.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.employeeMV.MonthlySalary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.employeeMV.MonthlySalary, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "number" } })
                @Html.ValidationMessageFor(model => model.employeeMV.MonthlySalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <h3>User Details</h3>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.userMV.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.userMV.UserName, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacter" } })
                @Html.ValidationMessageFor(model => model.userMV.UserName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.userMV.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.userMV.Password, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.userMV.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            <a class="btn btn-primary" href="@Url.Action("AllCompanyBranches","Branch")">Back</a>
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
}


<script src="~/Content/Customer/js/jquery-3.2.1.min.js"></script>
<!-- Related product section end -->
<script type="text/javascript">
    window.onload = function () { window.scrollBy(0, 180); }
    $(document).ready(function () {
        //called when key is pressed in textbox
        $("#onlynumber").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsg").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });
        $("#onlynumberr").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsg").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });

        $("#onlycharacter").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                //display error message
                $("#errmsg").html("Only character").show().fadeOut("slow");
                return false;
            }
        });
        $("#onlycharacterr").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                //display error message
                $("#errmsg").html("Only character").show().fadeOut("slow");
                return false;
            }
        });
        $("#onlycharacters").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                //display error message
                $("#errmsg").html("Only character").show().fadeOut("slow");
                return false;
            }
        });
    });

    $('input').keypress(function (e) {
        if (e.which === 32)
            return false;
    });
</script>
