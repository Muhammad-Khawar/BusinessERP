@model ERP_App.Models.CustomerMV

@{
    ViewBag.Title = "CreateCustomer";
}

<h2>Create Branch Customer</h2>

@using (Html.BeginForm("CreateBranchCustomer", "Customer", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(u => u.UserID)
        @Html.HiddenFor(u => u.BranchID)
        @Html.HiddenFor(u => u.CompanyID)
        <div class="form-group">
            @Html.LabelFor(model => model.Customername, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Customername, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacter" } })
                @Html.ValidationMessageFor(model => model.Customername, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerContact, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerContact, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlynumber" } })
                @Html.ValidationMessageFor(model => model.CustomerContact, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerArea, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerArea, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacter" } })
                @Html.ValidationMessageFor(model => model.CustomerArea, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerAddress, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.CustomerAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "onlycharacter" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerEmail, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "email" } })
                @Html.ValidationMessageFor(model => model.CustomerEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerPassword, new { htmlAttributes = new { @class = "form-control", @required = "required",@type="password" } })
                @Html.ValidationMessageFor(model => model.CustomerPassword, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">

            <a class="btn btn-primary" href="@Url.Action("AllBranchCustomer","Customer")">Back</a>
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
}

<script src="~/Content/Customer/js/jquery-3.2.1.min.js"></script>
<!-- Related product section end -->
<script type="text/javascript">
    window.onload = function () { window.scrollBy(0, 180); }
    $(document).ready(function () {
        //called when key is pressed in textbox
        $("#onlynumber").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsg").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });
        $("#onlynumberr").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsg").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });

        $("#onlycharacter").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                //display error message
                $("#errmsg").html("Only character").show().fadeOut("slow");
                return false;
            }
        });
        $("#onlycharacterr").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                //display error message
                $("#errmsg").html("Only character").show().fadeOut("slow");
                return false;
            }
        });
        $("#onlycharacters").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {
                //display error message
                $("#errmsg").html("Only character").show().fadeOut("slow");
                return false;
            }
        });
    });

    //$('input').keypress(function (e) {
    //    if (e.which === 32)
    //        return false;
    //});
    //$.validator.addMethod("NoWhiteSpaceAtBeginn", function (value, element) {
    //    return this.optional(element) || /^[^\t].*/.test(value);
    //}, "Must not begin with a whitespace");
    //$(document).ready(function () {
    //    $("#form1").validate();
    //});
</script>


